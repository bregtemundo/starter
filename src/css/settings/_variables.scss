// show grid helplines
$debug: false;
// $debug-baseline: false; // control baseline debug seperately (defaults to $debug)

// breakpoint-sass (use respond-to)
@include add-breakpoint(xs, 321px);
@include add-breakpoint(sm, 600px);
@include add-breakpoint(md, 1020px);
@include add-breakpoint(lg, 1325px);

// use baseline grid for typo or not
$type-type: 'line-height'; // font-size, line-height, baseline: where to measure leader and trailer space from
$baseline-grid: false; //if true $type-type is baseline
$vertical-padding: 20px;


// set font faces
$fontfaces: (
  'body': (
    font-family: '"Helvetica Neue", Arial, sans-serif',
    cap-height: 0.70,
    cap-position: 0.5,
    weights: (
      light: 300,
      normal: 400,
      bold: 700
    ),
    fallback: (
      font-family: '"Comic Sans MS", "Comic Sans", Arial, sans-serif',
      font-size: .96,
      line-height: 1.05,
      letter-spacing: .038
     )
  ),
  'title': (
    font-family: 'Roboto, Arial, sans-serif',
    cap-height: 0.70,
    cap-position: 0.5,
    weights: (
      light: 300,
      normal: 400,
      medium: 500,
      bold: 700
    ),
    fallback: (
      font-family: 'Arial, sans-serif',
      font-size: .96,
      line-height: 1.05,
      letter-spacing: .038
     )
  )
);


$fontsizes: (
  base: (
    null: (16px, 1.58),
    lg: (18px)
  ),
  h1: (
    null: (40px, 1.54),
    lg: (100px, 1)
  ),
  h2: (
    null: (32px, 1.15),
  ),
  h3: (
    null: (32px),
  ),
  h4: (
    null: (30px),
  ),
  h5: (
    null: (27px),
  ),
  h6: (
    null: (25px),
  )
);

// set a rootsize for each breakpoint (globally enlarge/smaller fonts, without setting $fontsizes for each breakpoint)
$breakpoint-map: (
  0: (
    start:      0px,
    rootsize:   8px, // baseline size
    gutter:     10px
  ),
  1: (
    start:      map-get($BREAKPOINTS, 'xs'),
    rootsize:   8px,
    gutter:     10px
  ),
  2: (
    start:      map-get($BREAKPOINTS, 'sm'),
    rootsize:   16px,
    gutter:     20px
  ),
  3: (
    start:      map-get($BREAKPOINTS, 'lg'),
    rootsize:   8px,
    gutter:     20px
  )
);


// Grid settings
$susy-nr-of-columns: 12;
$susy-size-gutters: .439;
$susy-max-width: 1200px;

$susy: (
  columns: $susy-nr-of-columns,
  gutters: $susy-size-gutters,

  container: $susy-max-width, //set max-width
  container-position: center,

  debug: (
    image: if($debug, 'show', 'hide'),
    color: rgba(0,0,255, 0.3),
    output: overlay,
    toggle: top right,
  ),

);

// define colors
$colors: (
  body:       #333,
  primary:    #111,
  secundary:  #222,
  disabled:   #ccc,
  border:     #999,
  selection:  #4682b4,
  ok:         green,
  warning:    orange,
  error:      red
);

// print out colors for the docs
@each $color-name,$color-code in $colors {
  $color-hex: map-get($colors, $color-name );
  /*
  #{$color-name} : #{$color-hex}

  Markup:
  <h2 style="padding:50px; background-color:#{$color-hex};">&nbsp;</h2>

  Styleguide tools.functions.color.#{$color-name}
  */
}

// print out fontsizes for docs
@each $fontsize-name, $fontsize-value in $fontsizes {
  /*
  #{$fontsize-name} : #{$fontsize-value}

  Styleguide tools.mixins.type.type.fontsize.#{$fontsize-name}
  */
}

// print out fontfaces for docs
@each $fontface-name, $fontface-value in $fontfaces {
  $fontface-family: map-get($fontface-value, 'font-family');
  /*
  #{$fontface-name} : #{$fontface-family}

  usage:
  @include ff(#{$fontface-name});

  Styleguide tools.mixins.type.ff.#{$fontface-name}
  */
}

// grid docs
/*
grid

the grid is defined by susy 2<br>
columns are set with mixin @indelude span(3);<br>
grid layouts are set with mixin @include gallery(3)<br>
more info on http://susy.readthedocs.io/shorthand/<br><br>

columns: #{$susy-nr-of-columns}<br>
gutters: #{$susy-size-gutters}<br>
container: #{$susy-max-width}

Styleguide tools.mixins.layout.grid
*/

// breakpoint docs
/*
breakpoints

breakpoint sass library is used http://breakpoint-sass.com/<br>
breakpoints are mobile first, so we start with smallest resolution and add on as screen gets larger
breakpoint can be set with mixin @include respond-to(sm);

Styleguide tools.mixins.layout.breakpoint
*/
@each $breakpoint-name, $breakpoint-value in $BREAKPOINTS {
  /*
  #{$breakpoint-name}

  #{$breakpoint-name}: #{$breakpoint-value}

  Styleguide tools.mixins.layout.breakpoint.#{$breakpoint-name}
  */
}


